import { InlineKeyboard } from 'grammy';
import { List } from '@prisma/client';
import { SamometerContext, SubMode } from '../controllers/session.controller';
import listRepository, { ListWithCounts } from '../repositories/list.repository';
import { BUTTON_SPACE_SEPARATOR } from '../constants';

class ListsView {
  async render(ctx: SamometerContext): Promise<[string, { reply_markup: InlineKeyboard, parse_mode: string }]> {
    const { listId: currentListId, subMode } = ctx.session;
    const keyboard = new InlineKeyboard();

    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ —é–∑–µ—Ä–∞
    const lists = await listRepository.getAllByUserId(ctx.from.id);

    // –†–µ–Ω–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ —Å–ø–∏—Å–∫–æ–≤
    for (const list of lists) {
      await this._renderListButton(keyboard, subMode, currentListId, list);
    }

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    this.appendServiceButtons(keyboard, subMode);

    return [this._renderTitle(subMode), { reply_markup: keyboard, parse_mode: 'MarkdownV2' }];
  }

  appendServiceButtons(keyboard: InlineKeyboard, subMode: SubMode) {
    if (subMode === SubMode.basic) {
      keyboard
        .text(`üöÆ${BUTTON_SPACE_SEPARATOR}–£–¥–∞–ª–∏—Ç—å`, 'submode-delete')
        .text(`–ü–æ–¥–µ–ª–∏—Ç—å—Å—è${BUTTON_SPACE_SEPARATOR}üîÅ`, 'submode-invite');
    } else {
      keyboard.text(`‚¨ÖÔ∏è${BUTTON_SPACE_SEPARATOR}–ù–∞–∑–∞–¥`, 'submode-basic');
    }

    return keyboard.row();
  }

  _renderTitle(subMode: SubMode): string {
    let title;
    switch (subMode) {
      case SubMode.delete:
        title = '*–£–î–ê–õ–ò–¢–¨ –°–ü–ò–°–û–ö*';
        break;
      case SubMode.invite:
        title = '*–ü–û–î–ï–õ–ò–¢–¨–°–Ø –°–ü–ò–°–ö–û–ú*';
        break;
      default:
        title = '*–í–´–ë–†–ê–¢–¨ –°–ü–ò–°–û–ö*';
    }
    return title;
  }

  async _renderListButton(
    keyboard: InlineKeyboard,
    subMode: SubMode,
    currentListId: number,
    list: ListWithCounts<List>) {

    const { id, name, _count: { users: usersCount, deals: dealsCount } } = list;

    // –ò–∫–æ–Ω–∫–∏ —Å–ø–∏—Å–∫–∞
    const shared = usersCount > 1 ? 'üåê' : '';
    const current = currentListId === id ? '‚≠êÔ∏è' : '';
    const icons = `${current}${shared} `;

    let renderedTitle;
    let callbackQueryStr;
    switch (subMode) {
      case SubMode.delete:
        renderedTitle = `${icons}${name}${BUTTON_SPACE_SEPARATOR}‚ùå`;
        callbackQueryStr = `lists-delete-${id}`;
        keyboard.text(renderedTitle, callbackQueryStr);
        break;
      case SubMode.invite:
        renderedTitle = `${icons}${name}`;

        // –û–±–Ω–æ–≤–ª—è–µ–º —É —Å–ø–∏—Å–∫–∞ guid
        // todo: –ù–∞–¥–æ –ª–∏ –Ω–∞–º –∫–∞–∂–¥—ã–π —Ä–∞–∑ –µ–≥–æ –æ–±–Ω–æ–≤–ª—è—Ç—å?
        const guid = await listRepository.updateGuid(id);
        callbackQueryStr = `invite-${guid}`;

        keyboard.switchInline(renderedTitle, callbackQueryStr);
        break;
      default:
        renderedTitle = `${icons}${name}  (${dealsCount})`;
        callbackQueryStr = `mode-deals-${id}`;
        keyboard.text(renderedTitle, callbackQueryStr);
    }

    keyboard.row();
  }
}

export default new ListsView();
